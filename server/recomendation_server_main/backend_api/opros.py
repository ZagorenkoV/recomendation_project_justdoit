import pandas as pd
import numpy as np
from xgboost import XGBClassifier
import time
from geopy import distance

def make_opros_recs(user_geo, n):
    t0 = time.time()
    groups_now = pd.read_csv("static/groups_now.csv", dtype={"уникальный номер": "int32","направление 1":"category",
                                                      "направление 2":"category" , "направление 3":"category", "район площадки":"category"})
    # print(time.time() - t0, "sec1")
    cols = ["направление 1", "направление 2", "район площадки"]
    train_data = groups_now[cols]
    d_groups_inference = dict()

    for i in enumerate(groups_now["направление 3"].unique().tolist()):
        d_groups_inference[i[0]] = i[1]

    # print(time.time() - t0, "sec2")
    clf = XGBClassifier(objective='multi:softmax', gpu_id=0, tree_method="gpu_hist", feature_types=["c", "c", "c"],
                                gamma=0.1,
                                learning_rate=0.1, enable_categorical=True,
                                max_depth=7,
                                reg_lambda=0.5, #predictor="gpu_predictor",
                                subsample=0.8,
                                eval_metric=['merror'],
                                seed=42)
    clf.load_model('static/xgb_groups.json')
    dirs_dict = {"2_1_1_1": ("Физическая активность", "Борьба"),
                 "2_1_1_2": ("Физическая активность", "Спортивные игры"),
                 "2_1_1_3": ("Физическая активность", "Коньки"),
                 "2_1_1_4": ("Физическая активность", "Лыжи"), "2_1_2_1": ("Физическая активность", "ГТО"),
                 "2_1_2_2": ("Физическая активность", "ОФП"),
                 "2_1_2_3": ("Физическая активность", "Гимнастика"),
                 "2_1_2_4": ("Физическая активность", "Скандинавская ходьба"),
                 "2_1_2_5": ("Физическая активность", "Фитнес, тренажеры"),
                 "2_1_2_6": ("Спецпроект / Тренировки долголетия (спецпроект по медицинской реабилитации)",
                             "Тренировки долголетия (спецпроект по медицинской реабилитации)"),
                 "2_1_3_1": ("Танцы", "Танцы"), "2_1_3_2": ("Танцы", "ОНЛАЙН Танцы"),
                 "2_1_4_1": ("Физическая активность", "ОНЛАЙН Гимнастика"),
                 "2_1_4_2": ("Физическая активность", "ОНЛАЙН ОФП"),
                 "2_2_1_1": ("Образование", "Английский язык"), "2_2_1_2": ("Образование", "ОНЛАЙН Английский язык"),
                 "2_2_1_3": ("Образование", "Иностранные языки"),
                 "2_2_1_4": ("Образование", "ОНЛАЙН Иностранные языки"),
                 "2_2_2_1_1": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Клубная работа"),
                 "2_2_2_1_2": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. История/Искусство"),
                 "2_2_2_1_3": ("Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. История/Искусство"),
                 "2_2_2_2_1": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Творческие мастерские"),
                 "2_2_2_2_2": (
                 "Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Творческие мастерские"),
                 "2_2_2_2_3": (
                 "Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Информационные технологии"),
                 "2_2_2_2_4": (
                 "Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Информационные технологии"),
                 "2_2_2_3_1": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Иностранные языки"),
                 "2_2_2_3_2": ("Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Иностранные языки"),
                 "2_2_2_3_3": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Психологические тренинги"),
                 "2_2_2_3_4": ("Творчество", "Литература"), "2_2_2_3_5": ("Творчество", "ОНЛАЙН Литература"),
                 "2_2_2_4_1": (
                 "Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Образовательный практикум"),
                 "2_2_2_4_2": (
                 "Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Образовательный практикум"),
                 "2_2_2_4_3": ("Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Проф/подготовка"),
                 "2_2_2_5_1": ("Спецпроект / Интеллектуальный клуб", "Интеллектуальный клуб. Домоводство"),
                 "2_2_2_5_2": ("Спецпроект / Интеллектуальный клуб", "ОНЛАЙН Интеллектуальный клуб. Домоводство"),
                 "2_2_2_5_3": ("Образование", "Пеший лекторий"), "2_2_2_5_4": ("Образование", "ОНЛАЙН Пеший лекторий"),
                 "2_2_3_1": ("Образование", "Информационные технологии"),
                 "2_2_3_2": ("Образование", "ОНЛАЙН Информационные технологии"),
                 "2_2_3_3": ("Образование", "ОНЛАЙН Киберспорт"),
                 "2_2_4_1": ("Образование", "История, искусство, краеведение"),
                 "2_2_4_2": ("Образование", "ОНЛАЙН История, искусство, краеведение"),
                 "2_2_4_3": ("Образование", "Психология и коммуникации"),
                 "2_2_4_4": ("Образование", "ОНЛАЙН Психология и коммуникации"), "2_2_4_5": ("Образование",),
                 "2_2_4_6": ("Образование", "Финансовая и правовая грамотность, личная безопасность"),
                 "2_2_5_1": ("Образование", "Образовательный практикум"),
                 "2_2_5_2": ("Образование", "ОНЛАЙН Образовательный практикум"),
                 "2_2_5_3": ("Образование", "Здорово жить"), "2_2_5_4": ("Образование", "ОНЛАЙН Здорово жить"),
                 "2_2_5_5": ("Спецпроект / Серебряный университет", "ОНЛАЙН Серебряный университет"),
                 "2_3_1_1_1": ("Рисование", "Рисование"), "2_3_1_1_2": ("Рисование", "ОНЛАЙН Рисование"),
                 "2_3_1_2_1": ("Спецпроект / Московский театрал", "Московский театрал"),
                 "2_3_1_2_2": ("Спецпроект / Московский театрал", "ОНЛАЙН Московский театрал"),
                 "2_3_1_3_1": ("Творчество", "Красота и стиль"), "2_3_1_3_2": ("Творчество", "ОНЛАЙН Красота и стиль"),
                 "2_3_1_4_1": ("Творчество", "Художественно-прикладное творчество"),
                 "2_3_1_4_2": ("Творчество", "ОНЛАЙН Художественно-прикладное творчество"),
                 "2_3_2_1": ("Творчество", "Музыка, фольклор"), "2_3_2_2": ("Творчество", "ОНЛАЙН Музыка, фольклор"),
                 "2_3_2_3": ("Пение", "Пение"), "2_3_2_4": ("Пение", "ОНЛАЙН Пение"),
                 "2_3_3_1": ("Творчество", "Домоводство"), "2_3_3_2": ("Творчество", "ОНЛАЙН Домоводство"),
                 "2_3_4_1": ("Творчество", "Фото/видео"), "2_3_4_2": ("Творчество", "ОНЛАЙН Фото/видео"),
                 "2_4_1_1": ("Игры", "Настольные игры"), "2_4_1_2": ("Игры", "ОНЛАЙН Настольные игры"),
                 "2_4_2_1": ("Игры", "Интеллектуальные игры"), "2_4_2_2": ("Игры", "ОНЛАЙН Интеллектуальные игры"),
                 "2_4_3_1": ("Игры", "Шахматы и шашки"), "2_4_3_2": ("Игры", "ОНЛАЙН Шахматы и шашки")}
    try_df = pd.DataFrame({"направление 1":[dirs_dict[n][0]], "направление 2":[dirs_dict[n][1]], "район площадки":[np.nan]})
    try_df = pd.concat([train_data, try_df], ignore_index=True)
    try_df = try_df.astype({"направление 1":"category", "направление 2":"category", "район площадки":"category"})

    pred = clf.predict_proba(try_df[-1:])
    # print(time.time() - t0, "sec3")
    a = enumerate(pred[0])
    max_v_index = sorted(a,key=lambda x: x[1], reverse=True)[:4]

    for i in groups_now["geo"].unique():
        try:
            groups_now.loc[groups_now["geo"]==i, "distance"] = distance.distance(user_geo.split(" "), i).km
        except:
            continue
    group_list = []
    if not pd.isna(user_geo):
        for i in range(len(max_v_index)):
            group_dir = d_groups_inference[max_v_index[i][0]]
            # print(group_dir, "directions")
            nearest_groups = groups_now.loc[groups_now["направление 3"].isin([group_dir])][["уникальный номер", "distance"]].min()
            group_distance = (int(nearest_groups["уникальный номер"]), '{:.1f} км'.format(nearest_groups["distance"]))
            group_list.append(group_distance)
    else:
        for i in range(len(max_v_index)):
            group_dir = d_groups_inference[max_v_index[i][0]]
            # print(group_dir, "directions")
            any_groups = groups_now.loc[groups_now["направление 3"].isin([group_dir])]["уникальный номер"]
            groups_tpl = (int(any_groups.sample(n=1)), np.nan)
            group_list.append(groups_tpl)
    print(time.time() - t0, "sec END")
    return group_list
